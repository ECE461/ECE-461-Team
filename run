#!/usr/bin/env python3

import sys
import subprocess
import os
import json

def install():
    try:
        # Install dependencies for frontend
        subprocess.run(["npm", "install"], cwd=os.path.join(os.path.dirname(__file__), "frontend"), check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Install dependencies for backend
        subprocess.run(["npm", "install"], cwd=os.path.join(os.path.dirname(__file__), "backend"), check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        # Install dependencies for jest
        subprocess.run(["npm", "install"], cwd=os.path.join(os.path.dirname(__file__)), check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        print("Dependencies installed successfully")
        
    except subprocess.CalledProcessError as e:
        print(f"Error installing dependencies: {e}")
        sys.exit(1)

def tests():
    try:
        # Execute jest command
        result = subprocess.run(
            ["npx", "jest", "--json", "--coverage", "--silent"],
            text=True,
            capture_output=True,
            check=True,
            cwd=os.path.dirname(__file__)
        )

        # Deserialize the Jest output from JSON format
        test_results = json.loads(result.stdout)
        total_tests = test_results["numTotalTests"]
        passed_tests = test_results["numPassedTests"]

        # Calculate the coverage percentage
        coverage_data = test_results.get("coverageMap", {})

        if coverage_data:
            lines_total = sum(len(file_data['statementMap']) for file_data in coverage_data.values())
            lines_covered = sum(1 for file_data in coverage_data.values() 
                        for line_key in file_data['statementMap'] 
                        if file_data['s'].get(line_key, 0) > 0)
            coverage_percentage = (lines_covered / lines_total * 100) if lines_total > 0 else 0
        else:
            coverage_percentage = 0

        # Final Test Results
        print(f"Total: {total_tests}")
        print(f"Passed: {passed_tests}")
        print(f"Coverage: {round(coverage_percentage)}%")
        print(f"{passed_tests}/{total_tests} test cases passed. {round(coverage_percentage)}% line coverage achieved.")

    except subprocess.CalledProcessError as err:
        # logging.info('Failed to run tests: %s', err.stderr)
        raise RuntimeError("There was an error executing Jest. Please check the logs.")

    except Exception as error:
        # logging.info("Encountered an issue while executing execute_tests()")
        # logging.debug(error)
        raise RuntimeError("An error occurred while running Jest. Check the logs for more information.")

def URL_FILE(file_path):
    try:
        with open(file_path, 'r') as file:
            urls = file.readlines()
        
        for url in urls:
            url = url.strip()
            if url:
                result = subprocess.run(["npx", "ts-node", "./backend/src/services/metrics/CLIParser.ts", url], capture_output=True, text=True, cwd=os.path.dirname(__file__))
                print(result.stdout)
                if result.stderr:
                    print(result.stderr, file=sys.stderr)
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        sys.exit(1)
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Incorrect Number of Arguments!!")
        sys.exit(0)
    
    if sys.argv[1] == 'install':
        install()
        sys.exit(0)

    # Check if GITHUB TOKEN HAS BEEN SET:
    if not os.getenv('GITHUB_TOKEN'):
        print("Please set the GITHUB_TOKEN environment variable.")
        sys.exit(1)

    if sys.argv[1] == 'test':
        tests()
        sys.exit(0)

    URL_FILE(sys.argv[1])